{"version":3,"sources":["../src/lib/drawio-embed.tsx","../src/lib/getEmbedUrl.ts","../src/lib/handleEvents.ts","../src/hooks/use-actions.ts"],"names":["forwardRef","useCallback","useEffect","useImperativeHandle","useRef","useState","getEmbedUrl","urlParameters","addConfiguration","url","URL","urlSearchParams","URLSearchParams","append","Object","keys","forEach","key","value","toString","search","handleEvent","event","handlers","origin","includes","data","JSON","parse","isEmbedEvent","handler","console","error","useActions","iframeRef","sendAction","action","current","contentWindow","postMessage","stringify","load","configure","merge","dialog","prompt","template","layout","draft","status","spinner","exportDiagram","DrawIOEmbed","DrawIoEmbed","props","ref","configuration","xml","onSave","onClose","onLoad","onConfigure","onDraft","onExport","onMerge","onPrompt","onTemplate","iframeUrl","isInitialized","setIsInitialized","messageHandler","evt","init","config","save","format","exit","export","message","modified","window","addEventListener","removeEventListener","iframe","className","src","title","style","width","height","minWidth","minHeight","border"],"mappings":"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","sourcesContent":["'use client';\nimport {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react';\nimport { DrawIoEmbedProps, DrawIoEmbedRef, EventUnion } from '../types';\nimport { getEmbedUrl } from './getEmbedUrl';\nimport { handleEvent } from './handleEvents';\nimport { useActions } from '../hooks/use-actions';\n/**\n * Draw.io embed component\n * @param {DrawIoEmbedProps} props\n * @param {string} props.urlParameters\n * @param {string} props.configuration\n * @param {string} props.xml\n * @param {(data: any) => void} props.onSave\n * @param {(data: any) => void} props.onClose\n * @param {(data: any) => void} props.onLoad\n * @param {(data: any) => void} props.onConfigure\n * @param {(data: any) => void} props.onDraft\n * @param {(data: any) => void} props.onExport\n * @param {(data: any) => void} props.onMerge\n * @param {(data: any) => void} props.onPrompt\n * @param {(data: any) => void} props.onTemplate\n * @param {React.Ref<DrawIoEmbedRef>} ref\n * @returns {JSX.Element}\n */\nexport const DrawIOEmbed = forwardRef<DrawIoEmbedRef, DrawIoEmbedProps>(\n  function DrawIoEmbed(props, ref): JSX.Element {\n    const {\n      urlParameters,\n      configuration,\n      xml,\n      onSave,\n      onClose,\n      onLoad,\n      onConfigure,\n      onDraft,\n      onExport,\n      onMerge,\n      onPrompt,\n      onTemplate,\n    } = props;\n\n    const iframeRef = useRef<HTMLIFrameElement>(null);\n    const action = useActions(iframeRef);\n    const iframeUrl = getEmbedUrl(urlParameters, !!configuration);\n    const [isInitialized, setIsInitialized] = useState(false);\n    /**\n     * @param {MessageEvent} evt\n     * @returns {void}\n     */\n    const messageHandler = useCallback(\n      (evt: MessageEvent) => {\n        /**\n         * @param {MessageEvent} evt\n         * @returns {void}\n         */\n        handleEvent(evt, {\n          /**\n           * @returns {void}\n           */\n          init: (): void => {\n            setIsInitialized(true);\n          },\n          /**\n           * @param {EventUnion<\"load\">} data\n           * @returns {void}\n           */\n          load: (data: EventUnion<\"load\">): void => {\n            if (onLoad) {\n              onLoad(data);\n            }\n          },\n          /**\n           * \n           * @param {EventUnion<\"configure\">} data\n           * @returns {void}\n           */\n          configure: (data: EventUnion<\"configure\">): void => {\n            if (configuration) {\n              action.configure({ config: configuration });\n            }\n\n            if (onConfigure) {\n              onConfigure(data);\n            }\n          },\n          /**\n           * @param {EventUnion<\"save\">} data\n           * @returns {void}\n           */\n          save: (data: EventUnion<\"save\">): void => {\n            action.exportDiagram({\n              format: 'xmlsvg',\n              exit: data.exit,\n            });\n          },\n          /**\n           * @param {EventUnion<\"exit\">} data\n           * @returns {void}\n           */\n          exit: (data: EventUnion<\"exit\">): void => {\n            if (onClose) {\n              onClose(data);\n            }\n          },\n          /**\n           * @param {EventUnion<\"draft\">} data\n           * @returns {void}\n           */ \n          draft: (data: EventUnion<\"draft\">): void => {\n            if (onDraft) {\n              onDraft(data);\n            }\n          },\n          /**\n           * @param {EventUnion<\"export\">} data\n           * @returns {void}           \n           */\n          export: (data: EventUnion<\"export\">): void => {\n            if (onSave) {\n              onSave({\n                event: 'save',\n                xml: data.data,\n              });\n            }\n            /**\n             * Check if exit is true and call onClose\n             * @returns {void}\n             */\n            if (onExport) {\n              onExport(data);\n            }\n            if (data.message.exit && onClose) {\n              onClose({\n                event: 'exit',\n                modified: true,\n              });\n            }\n          },\n          /**\n           * @param {EventUnion<\"merge\">} data\n           * @returns {void}\n           */\n          merge: (data: EventUnion<\"merge\">): void => {\n            if (onMerge) {\n              onMerge(data);\n            }\n          },\n          /**\n           * @param {EventUnion<'prompt'>} data\n           * @returns {void}\n           */\n          prompt: (data: EventUnion<'prompt'>): void => {\n            if (onPrompt) {\n              onPrompt(data);\n            }\n          },\n          /**\n           * @param {EventUnion<'template'>} data\n           * @returns {void}\n           */\n          template: (data: EventUnion<'template'>): void => {\n            if (onTemplate) {\n              onTemplate(data);\n            }\n          },\n        });\n      },\n      [\n        action,\n        configuration,\n        onClose,\n        onSave,\n        onLoad,\n        onConfigure,\n        onDraft,\n        onExport,\n        onMerge,\n        onPrompt,\n        onTemplate,\n      ],\n    );\n\n    useImperativeHandle(\n      /**\n       * @param {React.Ref<DrawIoEmbedRef>} ref\n       */\n      ref,\n      () => ({\n        /**\n         * @param {string} xml\n         * @returns {void}\n         */\n        ...action,\n      }),\n      [action],\n    );\n\n    useEffect(() => {\n      if (isInitialized) {\n        if (xml) {\n          action.load({ xml });\n        } else {\n          action.load({ xml: '' });\n        }\n      }\n    }, [action, isInitialized, xml]);\n\n    // Initial load\n    useEffect(() => {\n      /**\n       * Add event listener for messages from iframe\n       */\n      window.addEventListener('message', messageHandler);\n      /**\n       * Remove event listener for messages from iframe\n       */\n      return () => {\n        window.removeEventListener('message', messageHandler);\n      };\n    }, [messageHandler]);\n\n    return (\n      <iframe\n        className=\"diagrams-iframe\"\n        src={iframeUrl}\n        ref={iframeRef}\n        title=\"Diagrams.net\"\n        style={{\n          width: '100%',\n          height: '100%',\n          minWidth: '400px',\n          minHeight: '400px',\n          border: 'none',\n        }}\n      />\n    );\n  },\n);\n","import { UrlParameters } from '../types';\n\nexport const getEmbedUrl = (\n  urlParameters?: UrlParameters,\n  addConfiguration?: boolean,\n) => {\n  const url = new URL('/', 'https://embed.diagrams.net');\n  const urlSearchParams = new URLSearchParams();\n\n  urlSearchParams.append('proto', 'json');\n\n  if (addConfiguration) {\n    urlSearchParams.append('configure', '1');\n  }\n\n  if (urlParameters) {\n    Object.keys(urlParameters).forEach((key) => {\n      const value = urlParameters[key as keyof UrlParameters];\n\n      if (value) {\n        if (typeof value === 'boolean') {\n          urlSearchParams.append(key, value ? '1' : '0');\n        } else {\n          urlSearchParams.append(key, value.toString());\n        }\n      }\n    });\n  }\n\n  url.search = urlSearchParams.toString();\n\n  return url.toString();\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { EmbedEvents, EventHandlerMap } from '../types';\n\n/**\n * Type alias for a map of event handlers.\n * It maps each event name to its corresponding handler function,\n * which receives the event data typed to the specific event type.\n */\n// export type EventHandler = {\n//   [E in EmbedEvents as E['event']]?: (data: E) => void;\n// };\n/**\n * Handles an incoming postMessage event by parsing the data\n * and invoking the appropriate event handler if available.\n *\n * @param event - The MessageEvent received from the postMessage listener.\n * @param handlers - A map of event handlers keyed by the event type.\n */\nexport function handleEvent(\n  event: MessageEvent,\n  handlers: EventHandlerMap,\n): void {\n  // Validate the event origin to ensure it comes from 'embed.diagrams.net'.\n  if (!event.origin.includes('embed.diagrams.net')) {\n    return;\n  }\n  // export function handleEvent(event: MessageEvent, handlers: EventHandler) {\n\n  try {\n    // Attempt to parse the event data as an EmbedEvent.\n    const data = JSON.parse(event.data) as EmbedEvents;\n\n    // Check if there is a handler for the received event type.\n\n    if (isEmbedEvent(data)) {\n      const handler = handlers[data.event];\n\n      if (handler) {\n        // Invoke the handler with the correctly typed data.\n        handler(data as any);\n      }\n    }\n  } catch {\n    // An empty catch block should be avoided, at least log the error.\n    console.error('Failed to handle event');\n  }\n}\n\n// Helper type guard function to discriminate the EmbedEvents type\nexport function isEmbedEvent(data: unknown): data is EmbedEvents {\n  return typeof data === 'object' && data !== null && 'event' in data;\n}\n","'use client';\nimport { RefObject } from 'react';\nimport {\n  ActionConfigure,\n  ActionDialog,\n  ActionDraft,\n  ActionExport,\n  ActionLayout,\n  ActionLoad,\n  ActionMerge,\n  ActionPrompt,\n  ActionSpinner,\n  ActionStatus,\n  ActionTemplate,\n  EmbedActions,\n  EventKey,\n  UniqueActionProps,\n  // ActionUnion\n} from '../types';\n/**\n * @description A hook to send actions to the draw.io editor\n * @param {RefObject<HTMLIFrameElement | null>} iframeRef\n * @returns {EmbedActions}\n */\nexport const useActions = (iframeRef: RefObject<HTMLIFrameElement | null>) => {\n  function sendAction<A extends EventKey>(\n    action: A,\n    data: UniqueActionProps<EmbedActions>,\n  ): void{\n    iframeRef.current?.contentWindow?.postMessage(\n      JSON.stringify({\n        action,\n        ...data,\n      }),\n      '*',\n    );\n  }\n\n  /**\n   * Loads the given XML into the editor\n   * @param {UniqueActionProps<ActionLoad>} data\n   * @returns {void}\n   */\n  const load = (data: UniqueActionProps<ActionLoad>): void => {\n    sendAction('load', data);\n  };\n/**\n * Configure the editor\n * @param {UniqueActionProps<ActionConfigure>} data\n * @returns {void}\n */\n  const configure = (data: UniqueActionProps<ActionConfigure>): void => {\n    sendAction('configure', data);\n  };\n  /**\n   * Merge the contents of the given XML into the current file\n   * @param {UniqueActionProps<ActionMerge>} data\n   * @returns {void}\n   */\n  const merge = (data: UniqueActionProps<ActionMerge>): void => {\n    sendAction('merge', data);\n  };\n  /**\n   * Display a dialog in the editor window\n   * @param {UniqueActionProps<ActionDialog>} data\n   * @returns {void}\n   */\n  const dialog = (data: UniqueActionProps<ActionDialog>): void => {\n    sendAction('dialog', data);\n  };\n  /**\n   * Display a prompt in the editor window\n   * @param {UniqueActionProps<ActionPrompt>} data\n   * @returns {void}\n   */\n  const prompt = (data: UniqueActionProps<ActionPrompt>): void => {\n    sendAction('prompt', data);\n  };\n\n  /**\n   * Show the template dialog\n   * @param {UniqueActionProps<ActionTemplate>} data\n   * @returns {void}\n   */\n  const template = (data: UniqueActionProps<ActionTemplate>): void => {\n    sendAction('template', data);\n  };\n  /**\n   * Runs an array of layouts using the same format as Arrange > Layout > Apply.\n   * @param {UniqueActionProps<ActionLayout>} data\n   * @returns {void}\n   */\n  const layout = (data: UniqueActionProps<ActionLayout>): void => {\n    sendAction('layout', data);\n  };\n  /**\n   * Show a draft dialog\n   * @param {UniqueActionProps<ActionDraft>} data\n   * @returns {void}\n   */\n  const draft = (data: UniqueActionProps<ActionDraft>): void => {\n    sendAction('draft', data);\n  };\n  /**\n   * Display a message in the status bar\n   * @param {UniqueActionProps<ActionStatus>} data\n   * @returns {void}\n   */\n  const status = (data: UniqueActionProps<ActionStatus>): void => {\n    sendAction('status', data);\n  };\n  /**\n   * Display a spinner with a message or hide the current spinner if show is set to false\n   * @param {UniqueActionProps<ActionSpinner>} data\n   * @returns {void}\n   */\n  const spinner = (data: UniqueActionProps<ActionSpinner>): void => {\n    sendAction('spinner', data);\n  };\n  /**\n   * Export the current diagram\n   * @param {UniqueActionProps<ActionExport>} data\n   * @returns {void}\n   */\n  const exportDiagram = (data: UniqueActionProps<ActionExport>): void => {\n    sendAction('export', data);\n  };\n/**\n * @description A hook to send actions to the draw.io editor\n */\n  return {\n    load,\n    configure,\n    merge,\n    dialog,\n    prompt,\n    template,\n    layout,\n    draft,\n    status,\n    spinner,\n    exportDiagram,\n  };\n};\n"]}