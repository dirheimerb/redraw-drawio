{"version":3,"file":"DrawIO.stories-4f3b9d7b.js","sources":["../../node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js","../../src/lib/getEmbedUrl.ts","../../src/lib/handleEvents.ts","../../src/hooks/use-actions.ts","../../src/lib/drawio-embed.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import { UrlParameters } from '../types';\n\nexport const getEmbedUrl = (\n  urlParameters?: UrlParameters,\n  addConfiguration?: boolean,\n) => {\n  const url = new URL('/', 'https://embed.diagrams.net');\n  const urlSearchParams = new URLSearchParams();\n\n  urlSearchParams.append('proto', 'json');\n\n  if (addConfiguration) {\n    urlSearchParams.append('configure', '1');\n  }\n\n  if (urlParameters) {\n    Object.keys(urlParameters).forEach((key) => {\n      const value = urlParameters[key as keyof UrlParameters];\n\n      if (value) {\n        if (typeof value === 'boolean') {\n          urlSearchParams.append(key, value ? '1' : '0');\n        } else {\n          urlSearchParams.append(key, value.toString());\n        }\n      }\n    });\n  }\n\n  url.search = urlSearchParams.toString();\n\n  return url.toString();\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { EmbedEvents, EventHandlerMap } from '../types';\n\n/**\n * Type alias for a map of event handlers.\n * It maps each event name to its corresponding handler function,\n * which receives the event data typed to the specific event type.\n */\n// export type EventHandler = {\n//   [E in EmbedEvents as E['event']]?: (data: E) => void;\n// };\n/**\n * Handles an incoming postMessage event by parsing the data\n * and invoking the appropriate event handler if available.\n *\n * @param event - The MessageEvent received from the postMessage listener.\n * @param handlers - A map of event handlers keyed by the event type.\n */\nexport function handleEvent(\n  event: MessageEvent,\n  handlers: EventHandlerMap,\n): void {\n  // Validate the event origin to ensure it comes from 'embed.diagrams.net'.\n  if (!event.origin.includes('embed.diagrams.net')) {\n    return;\n  }\n  // export function handleEvent(event: MessageEvent, handlers: EventHandler) {\n\n  try {\n    // Attempt to parse the event data as an EmbedEvent.\n    const data = JSON.parse(event.data) as EmbedEvents;\n\n    // Check if there is a handler for the received event type.\n\n    if (isEmbedEvent(data)) {\n      const handler = handlers[data.event];\n\n      if (handler) {\n        // Invoke the handler with the correctly typed data.\n        handler(data as any);\n      }\n    }\n  } catch {\n    // An empty catch block should be avoided, at least log the error.\n    console.error('Failed to handle event');\n  }\n}\n\n// Helper type guard function to discriminate the EmbedEvents type\nexport function isEmbedEvent(data: unknown): data is EmbedEvents {\n  return typeof data === 'object' && data !== null && 'event' in data;\n}\n","'use client';\nimport { RefObject } from 'react';\nimport {\n  ActionConfigure,\n  ActionDialog,\n  ActionDraft,\n  ActionExport,\n  ActionLayout,\n  ActionLoad,\n  ActionMerge,\n  ActionPrompt,\n  ActionSpinner,\n  ActionStatus,\n  ActionTemplate,\n  EmbedActions,\n  EventKey,\n  UniqueActionProps,\n  // ActionUnion\n} from '../types';\n/**\n * @description A hook to send actions to the draw.io editor\n * @param {RefObject<HTMLIFrameElement | null>} iframeRef\n * @returns {EmbedActions}\n */\nexport const useActions = (iframeRef: RefObject<HTMLIFrameElement | null>) => {\n  function sendAction<A extends EventKey>(\n    action: A,\n    data: UniqueActionProps<EmbedActions>,\n  ): void{\n    iframeRef.current?.contentWindow?.postMessage(\n      JSON.stringify({\n        action,\n        ...data,\n      }),\n      '*',\n    );\n  }\n\n  /**\n   * Loads the given XML into the editor\n   * @param {UniqueActionProps<ActionLoad>} data\n   * @returns {void}\n   */\n  const load = (data: UniqueActionProps<ActionLoad>): void => {\n    sendAction('load', data);\n  };\n/**\n * Configure the editor\n * @param {UniqueActionProps<ActionConfigure>} data\n * @returns {void}\n */\n  const configure = (data: UniqueActionProps<ActionConfigure>): void => {\n    sendAction('configure', data);\n  };\n  /**\n   * Merge the contents of the given XML into the current file\n   * @param {UniqueActionProps<ActionMerge>} data\n   * @returns {void}\n   */\n  const merge = (data: UniqueActionProps<ActionMerge>): void => {\n    sendAction('merge', data);\n  };\n  /**\n   * Display a dialog in the editor window\n   * @param {UniqueActionProps<ActionDialog>} data\n   * @returns {void}\n   */\n  const dialog = (data: UniqueActionProps<ActionDialog>): void => {\n    sendAction('dialog', data);\n  };\n  /**\n   * Display a prompt in the editor window\n   * @param {UniqueActionProps<ActionPrompt>} data\n   * @returns {void}\n   */\n  const prompt = (data: UniqueActionProps<ActionPrompt>): void => {\n    sendAction('prompt', data);\n  };\n\n  /**\n   * Show the template dialog\n   * @param {UniqueActionProps<ActionTemplate>} data\n   * @returns {void}\n   */\n  const template = (data: UniqueActionProps<ActionTemplate>): void => {\n    sendAction('template', data);\n  };\n  /**\n   * Runs an array of layouts using the same format as Arrange > Layout > Apply.\n   * @param {UniqueActionProps<ActionLayout>} data\n   * @returns {void}\n   */\n  const layout = (data: UniqueActionProps<ActionLayout>): void => {\n    sendAction('layout', data);\n  };\n  /**\n   * Show a draft dialog\n   * @param {UniqueActionProps<ActionDraft>} data\n   * @returns {void}\n   */\n  const draft = (data: UniqueActionProps<ActionDraft>): void => {\n    sendAction('draft', data);\n  };\n  /**\n   * Display a message in the status bar\n   * @param {UniqueActionProps<ActionStatus>} data\n   * @returns {void}\n   */\n  const status = (data: UniqueActionProps<ActionStatus>): void => {\n    sendAction('status', data);\n  };\n  /**\n   * Display a spinner with a message or hide the current spinner if show is set to false\n   * @param {UniqueActionProps<ActionSpinner>} data\n   * @returns {void}\n   */\n  const spinner = (data: UniqueActionProps<ActionSpinner>): void => {\n    sendAction('spinner', data);\n  };\n  /**\n   * Export the current diagram\n   * @param {UniqueActionProps<ActionExport>} data\n   * @returns {void}\n   */\n  const exportDiagram = (data: UniqueActionProps<ActionExport>): void => {\n    sendAction('export', data);\n  };\n/**\n * @description A hook to send actions to the draw.io editor\n */\n  return {\n    load,\n    configure,\n    merge,\n    dialog,\n    prompt,\n    template,\n    layout,\n    draft,\n    status,\n    spinner,\n    exportDiagram,\n  };\n};\n","'use client';\nimport {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react';\nimport { DrawIoEmbedProps, DrawIoEmbedRef, EventUnion } from '../types';\nimport { getEmbedUrl } from './getEmbedUrl';\nimport { handleEvent } from './handleEvents';\nimport { useActions } from '../hooks/use-actions';\n/**\n * Draw.io embed component\n * @param {DrawIoEmbedProps} props\n * @param {string} props.urlParameters\n * @param {string} props.configuration\n * @param {string} props.xml\n * @param {(data: any) => void} props.onSave\n * @param {(data: any) => void} props.onClose\n * @param {(data: any) => void} props.onLoad\n * @param {(data: any) => void} props.onConfigure\n * @param {(data: any) => void} props.onDraft\n * @param {(data: any) => void} props.onExport\n * @param {(data: any) => void} props.onMerge\n * @param {(data: any) => void} props.onPrompt\n * @param {(data: any) => void} props.onTemplate\n * @param {React.Ref<DrawIoEmbedRef>} ref\n * @returns {JSX.Element}\n */\nexport const DrawIOEmbed = forwardRef<DrawIoEmbedRef, DrawIoEmbedProps>(\n  function DrawIoEmbed(props, ref): JSX.Element {\n    const {\n      urlParameters,\n      configuration,\n      xml,\n      onSave,\n      onClose,\n      onLoad,\n      onConfigure,\n      onDraft,\n      onExport,\n      onMerge,\n      onPrompt,\n      onTemplate,\n    } = props;\n\n    const iframeRef = useRef<HTMLIFrameElement>(null);\n    const action = useActions(iframeRef);\n    const iframeUrl = getEmbedUrl(urlParameters, !!configuration);\n    const [isInitialized, setIsInitialized] = useState(false);\n    /**\n     * @param {MessageEvent} evt\n     * @returns {void}\n     */\n    const messageHandler = useCallback(\n      (evt: MessageEvent) => {\n        /**\n         * @param {MessageEvent} evt\n         * @returns {void}\n         */\n        handleEvent(evt, {\n          /**\n           * @returns {void}\n           */\n          init: (): void => {\n            setIsInitialized(true);\n          },\n          /**\n           * @param {EventUnion<\"load\">} data\n           * @returns {void}\n           */\n          load: (data: EventUnion<\"load\">): void => {\n            if (onLoad) {\n              onLoad(data);\n            }\n          },\n          /**\n           * \n           * @param {EventUnion<\"configure\">} data\n           * @returns {void}\n           */\n          configure: (data: EventUnion<\"configure\">): void => {\n            if (configuration) {\n              action.configure({ config: configuration });\n            }\n\n            if (onConfigure) {\n              onConfigure(data);\n            }\n          },\n          /**\n           * @param {EventUnion<\"save\">} data\n           * @returns {void}\n           */\n          save: (data: EventUnion<\"save\">): void => {\n            action.exportDiagram({\n              format: 'xmlsvg',\n              exit: data.exit,\n            });\n          },\n          /**\n           * @param {EventUnion<\"exit\">} data\n           * @returns {void}\n           */\n          exit: (data: EventUnion<\"exit\">): void => {\n            if (onClose) {\n              onClose(data);\n            }\n          },\n          /**\n           * @param {EventUnion<\"draft\">} data\n           * @returns {void}\n           */ \n          draft: (data: EventUnion<\"draft\">): void => {\n            if (onDraft) {\n              onDraft(data);\n            }\n          },\n          /**\n           * @param {EventUnion<\"export\">} data\n           * @returns {void}           \n           */\n          export: (data: EventUnion<\"export\">): void => {\n            if (onSave) {\n              onSave({\n                event: 'save',\n                xml: data.data,\n              });\n            }\n            /**\n             * Check if exit is true and call onClose\n             * @returns {void}\n             */\n            if (onExport) {\n              onExport(data);\n            }\n            if (data.message.exit && onClose) {\n              onClose({\n                event: 'exit',\n                modified: true,\n              });\n            }\n          },\n          /**\n           * @param {EventUnion<\"merge\">} data\n           * @returns {void}\n           */\n          merge: (data: EventUnion<\"merge\">): void => {\n            if (onMerge) {\n              onMerge(data);\n            }\n          },\n          /**\n           * @param {EventUnion<'prompt'>} data\n           * @returns {void}\n           */\n          prompt: (data: EventUnion<'prompt'>): void => {\n            if (onPrompt) {\n              onPrompt(data);\n            }\n          },\n          /**\n           * @param {EventUnion<'template'>} data\n           * @returns {void}\n           */\n          template: (data: EventUnion<'template'>): void => {\n            if (onTemplate) {\n              onTemplate(data);\n            }\n          },\n        });\n      },\n      [\n        action,\n        configuration,\n        onClose,\n        onSave,\n        onLoad,\n        onConfigure,\n        onDraft,\n        onExport,\n        onMerge,\n        onPrompt,\n        onTemplate,\n      ],\n    );\n\n    useImperativeHandle(\n      /**\n       * @param {React.Ref<DrawIoEmbedRef>} ref\n       */\n      ref,\n      () => ({\n        /**\n         * @param {string} xml\n         * @returns {void}\n         */\n        ...action,\n      }),\n      [action],\n    );\n\n    useEffect(() => {\n      if (isInitialized) {\n        if (xml) {\n          action.load({ xml });\n        } else {\n          action.load({ xml: '' });\n        }\n      }\n    }, [action, isInitialized, xml]);\n\n    // Initial load\n    useEffect(() => {\n      /**\n       * Add event listener for messages from iframe\n       */\n      window.addEventListener('message', messageHandler);\n      /**\n       * Remove event listener for messages from iframe\n       */\n      return () => {\n        window.removeEventListener('message', messageHandler);\n      };\n    }, [messageHandler]);\n\n    return (\n      <iframe\n        className=\"diagrams-iframe\"\n        src={iframeUrl}\n        ref={iframeRef}\n        title=\"Diagrams.net\"\n        style={{\n          width: '100%',\n          height: '100%',\n          minWidth: '400px',\n          minHeight: '400px',\n          border: 'none',\n        }}\n      />\n    );\n  },\n);\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","getEmbedUrl","urlParameters","addConfiguration","url","urlSearchParams","key","value","handleEvent","event","handlers","data","isEmbedEvent","handler","useActions","iframeRef","sendAction","action","_b","_a","DrawIOEmbed","forwardRef","props","ref","configuration","xml","onSave","onClose","onLoad","onConfigure","onDraft","onExport","onMerge","onPrompt","onTemplate","useRef","iframeUrl","isInitialized","setIsInitialized","useState","messageHandler","useCallback","evt","useImperativeHandle","useEffect","jsx"],"mappings":"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","x_google_ignoreList":[0,1]}